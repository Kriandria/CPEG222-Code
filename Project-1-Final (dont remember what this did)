/*Program : Homework 1
 *Authors:  Dylan Martin and Dylan Leh
 *Team #:   38
 *
 * 
 * 
 *9/12/2017
 *Description: This program initializes with LED0 set on. When the left button is pressed,
 *It lights up LED0 through 7, in that order on a 200ms delay. When the right button is pressed,
 *It rotates through the LEDs in the inverse order, starting where it left off previously.
 *Pressing the center button stops the LED shifts alltogehter.
 */

#ifndef _SUPPRESS_PLIB_WARNING          //suppresses the warning about plib
#define _SUPPRESS_PLIB_WARNING
#endif

#include <plib.h>
#include <sys/attribs.h>
#include <xc.h>
#include <stdio.h>
#include <stdlib.h>
#include "lcd.h"
#include "led.h"
#include "btn.h"
#include "utils.h"
#include "aic.h"
#include "adc.h"


#define SYS_FREQ    (80000000L)         // 80MHz system clock

void delay_ms(int ms) {
    int i, b;
    for (b = 0; b < ms; b++) {
        for (i = 0; i < 64; i++) {
        }// delay for one millisecond
    }
}

void debounce_btn(int valPot) {
    int btnLock = 0;
    if (BTN_GetValue(1) && btnLock == 0) {
        btnLock = 1;
    } else if (!BTN_GetValue(1) && btnLock) {
        delay_ms(valPot);
        btnLock = 0;
    } else if (BTN_GetValue(3) && btnLock == 0) {
        btnLock = 1;
    } else if (!BTN_GetValue(3) && btnLock) {
        delay_ms(valPot);
        btnLock = 0;
    } else if (BTN_GetValue(2) && btnLock == 0) {
        btnLock = 1;
    } else if (!BTN_GetValue(2) && btnLock) {
        delay_ms(valPot);
        btnLock = 0;
    } else if (BTN_GetValue(4) && btnLock == 0) {
        btnLock = 1;
    } else if (!BTN_GetValue(4) && btnLock) {
        delay_ms(valPot);
        btnLock = 0;
    }else if (BTN_GetValue(0) && btnLock == 0) {
        btnLock = 1;
    } else if (!BTN_GetValue(0) && btnLock) {
        delay_ms(valPot);
        btnLock = 0;
    }
}

int checkDelay(int comparator, int valPot, char strMsg[80]){
    if (AIC_Val() != comparator) {
        valPot = ((AIC_Val() + 10) * 990 / 1023) + 1;
        comparator = valPot;
        sprintf(strMsg, "Delay:%04d", valPot);
        LCD_WriteStringAtPos(strMsg, 1, 0);
        return valPot;
    }
}

int main(void) {
    
    DDPCONbits.JTAGEN = 0; // Required to access LED0
    LED_Init(); // Sets all LEDs as outputs with a value 0
    BTN_Init(); // Sets all buttons as inputs   
    LCD_Init(); // Allows usage of lcd screen
    LCD_WriteStringAtPos("Team 38", 0, 0);
    AIC_Init();

    

    char strMsg[80]; 
    int valPot = ((AIC_Val() + 10) * 990 / 1023) + 1;
    sprintf(strMsg, "Delay:%04d", valPot);
    LCD_WriteStringAtPos(strMsg, 1, 0);
    LCD_WriteStringAtPos("ms",1,10);
    
    int comparator = ((valPot - 1) * 1023 / 990) - 10;
    
    int c = 0;
    int i = 0; //counter
    //LED_SetValue(0, 1); // Sets LED0 to have value 1
    while (1) {
        valPot = checkDelay(comparator, valPot, strMsg);

        if (BTN_GetValue(1) == 1) {
            for(i = 0; i <= 7; i++){
                LED_SetValue(i,0);   
            }
            LED_SetValue(c,1);
            while (!BTN_GetValue(3) && !BTN_GetValue(2) && !BTN_GetValue(0) && !BTN_GetValue(4)) {
                for (c = c; c <= 7; c++) {
                    valPot = checkDelay(comparator, valPot, strMsg);
                    debounce_btn(valPot);
                    LED_SetValue(c, 1);
                    if (BTN_GetValue(3) || BTN_GetValue(2) || BTN_GetValue(0) || BTN_GetValue(4)) {
                        break;
                    }
                    delay_ms(valPot);
                    LED_SetValue(c, 0);
                    if (c == 7) {

                        c = -1;

                    }
                }
            }
        }
        if (BTN_GetValue(3) == 1) {
            for(i = 0; i <= 7; i++){
                LED_SetValue(i,0);   
            }
            LED_SetValue(c,1);
            while (!BTN_GetValue(1) && !BTN_GetValue(2) && !BTN_GetValue(0) && !BTN_GetValue(4)) {
                for (c = c; c >= 0; c--) {
                    valPot = checkDelay(comparator, valPot, strMsg);
                    debounce_btn(valPot);
                    LED_SetValue(c, 1);
                    if (BTN_GetValue(1) || BTN_GetValue(2) || BTN_GetValue(0) || BTN_GetValue(4)) {
                        break;
                    }
                    delay_ms(valPot);
                    LED_SetValue(c, 0);
                    if (c == 0) {

                        c = 8;

                    }
                }
            }
        }
        else if (BTN_GetValue(0) == 1){
            for(i = 0; i <= 7; i++){
                LED_SetValue(i,0);   
            }
            while(!BTN_GetValue(1) && !BTN_GetValue(2) && !BTN_GetValue(3) && !BTN_GetValue(4)){
                for (c = 0; c <= 7; c++){
                    valPot = checkDelay(comparator, valPot, strMsg);
                    debounce_btn(valPot);
                    if (BTN_GetValue(3) || BTN_GetValue(1) || BTN_GetValue(4)) {
                        for(i = 0; i <= 7; i++){
                            LED_SetValue(i,0);
                        }
                        break;
                    }
                    if (BTN_GetValue(2)){
                        break;
                    }
                    LED_SetValue(c,1);
                    delay_ms(valPot);
                    if(c == 7){
                        for(i = 0; i <= 7; i++){
                            LED_SetValue(i,0);   
                        }
                        delay_ms(valPot);
                        c = -1;
                    }
                    
                }
            }
        }
        else if (BTN_GetValue(4) == 1){
            while(!BTN_GetValue(1) && !BTN_GetValue(2) && !BTN_GetValue(3) && !BTN_GetValue(0)){
                for (c = 7; c >= 0; c--){
                    valPot = checkDelay(comparator, valPot, strMsg);
                    debounce_btn(valPot);
                    if (BTN_GetValue(3) || BTN_GetValue(0) || BTN_GetValue(1)) {
                        for(i = 0; i <= 7; i++){
                            LED_SetValue(i,0);
                        }
                        break;
                    }
                    if (BTN_GetValue(2)){
                        break;
                    }
                    if(c == 7){
                        for(i = 0; i <= 7; i++){
                            LED_SetValue(i,1);   
                        }
                    }
                    delay_ms(valPot);
                    LED_SetValue(c,0);
                    
                    if (c == 0) {
                        delay_ms(valPot);
                        c = 8;
                    }
                    
                }
            }
        }
        if (BTN_GetValue(2) == 1) {
            debounce_btn(valPot);
                    if (BTN_GetValue(3) || BTN_GetValue(1)) {
                        for(i = 0; i <= 7; i++){
                            LED_SetValue(i,0);
                        }
                        LED_SetValue(c,1);
                    }
            
        }
    }
}
