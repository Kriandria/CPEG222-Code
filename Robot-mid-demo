/*
 * File:   proj5.c
 * Author: ruinsane
 *
 * Created on November 28, 2017, 1:09 PM
 */
#ifndef _SUPPRESS_PLIB_WARNING          //suppresses the warning about plib
#define _SUPPRESS_PLIB_WARNING
#endif
#include <xc.h>
#include <stdio.h>
#include <stdlib.h>
#include <plib.h>
#include <sys/attribs.h>
#include "swt.h"
#include "srv.h"
#include "led.h"
#include "lcd.h"
#include "ssd.h"
#include "config.h"
#include "utils.h"

#define SYS_FREQ    (80000000L)     // 80MHz system clock
#define CORE_TICK_PERIOD (SYS_FREQ/20) //100ms core tick

#pragma config FPLLIDIV = DIV_2         // PLL Input Divider (2x Divider)
#pragma config FPLLMUL = MUL_20         // PLL Multiplier (20x Multiplier)
#pragma config FPLLODIV = DIV_1         // System PLL Output Clock Divider (PLL Divide by 1)
#pragma config FNOSC = PRIPLL           // Oscillator Selection Bits (Primary Osc w/PLL (XT+,HS+,EC+PLL))
#pragma config FSOSCEN = OFF            // Secondary Oscillator Enable (Disabled)
#pragma config POSCMOD = XT             // Primary Oscillator Configuration (XT osc mode)
#pragma config FPBDIV = DIV_8           // Peripheral Clock Divisor (Pb_Clk is Sys_Clk/8)

unsigned char dig1 = 0;            // digigts 1-3 and decimal are used for the SSD
unsigned char dig2 = 0;
unsigned char dig3 = 0;
unsigned char decimal = 0;
unsigned int counter = 0;
    int right, left = 0x00;

void initalize(){
    DDPCONbits.JTAGEN = 0;
    SRV_Init();
    SWT_Init();
    LED_Init();
    LCD_Init();
    SSD_Init();
    LCD_WriteStringAtPos("Team: 38",0,0);
}

void delay_ms(int ms) {
    // delays the program for ms milliseconds
    int i, b;
    for (b = 0; b < ms; b++) {
        for (i = 0; i < 1427; i++) {
        }
    }
}

int main(){
    initalize();
   
    OpenCoreTimer(CORE_TICK_PERIOD);    //Opens and initializes the core timer
    mConfigIntCoreTimer(CT_INT_ON | CT_INT_PRIOR_2);
    INTEnableSystemMultiVectoredInt();
   
    while(1){
        if((SWT_GetValue(0) == 0 && SWT_GetValue(1) == 0) || (SWT_GetValue(0) == 1 && SWT_GetValue(1) == 1)){
            //stop right mot
            SRV_SetPulseMicroseconds2(0);
            LCD_WriteStringAtPos("STP",1,13);
            right = 0x0;
        }
        else if (SWT_GetValue(0) == 1 && SWT_GetValue(1) == 0){
            //right mot forward
            SRV_SetPulseMicroseconds2(300);
            right = 0b1100;
            LCD_WriteStringAtPos("FWD",1,13);
        }
        else if (SWT_GetValue(0) == 0 && SWT_GetValue(1) == 1){
            //right mot reverse
            SRV_SetPulseMicroseconds2(540);
            right = 0b0011;
            LCD_WriteStringAtPos("REV",1,13);
        }
       
        if ((SWT_GetValue(6) == 0 && SWT_GetValue(7) == 0) || (SWT_GetValue(6) == 1 && SWT_GetValue(7) == 1)){
            //stop left mot
            SRV_SetPulseMicroseconds1(0);
            LCD_WriteStringAtPos("STP",1,0);
            left = 0x00;
        }    
        else if (SWT_GetValue(6) == 1 && SWT_GetValue(7) == 0){
            //Left mot forward
            SRV_SetPulseMicroseconds1(540);
            left = 0b00110000;
            LCD_WriteStringAtPos("FWD",1,0);
        }
        else if (SWT_GetValue(6) == 0 && SWT_GetValue(7) == 1){
            //Left mot backwards
            SRV_SetPulseMicroseconds1(300);
            left = 0b11000000;
            LCD_WriteStringAtPos("REV",1,0);
        }
        LED_SetGroupValue(left+right);
       
        delay_ms(20);
       
    }
}

void setOnSSD(int num) {
/* Breaks the axis component designated for the SSD into it's individual digits,
and then sends those digits to be displayed on the SSD, disabling leading zeros.
If the value is less than -999, then display '-FFF' on the display.
*/
    int dig1, dig2, dig3, dig4 = 0;
 
    dig1 = num % 10;            // decimal  
    dig2 = (num % 100) / 10;    // ones
    dig3 = (num % 1000) / 100;  // tens            
    dig4 = num / 1000;          // hunds
   
    //SSD_WriteDigits only accepts values from 0 to 17. Any other value will result
    //in the segement being deactived. Here, 20 is used to disable leading 0's.
   
    if (num < 10){
        SSD_WriteDigits(dig1,0,20,20,0,1,0,0);       
    }                                              
    else if (num < 100 && num >= 10){
        SSD_WriteDigits(dig1,dig2,20,20,0,1,0,0);
    }
    else if (num < 1000 && num >= 100){
        SSD_WriteDigits(dig1,dig2,dig3,20,0,1,0,0);
    }
    else if (num > 1000){
        SSD_WriteDigits(dig1,dig2,dig3,dig4,0,1,0,0);
    }
}

void __ISR(_CORE_TIMER_VECTOR, ipl2) _CoreTimerHandler(void) { 
    // clear the interrupt flag
    mCTClearIntFlag();
    // update the period
    UpdateCoreTimer(CORE_TICK_PERIOD);
   
    if (left != 0x00 || right != 0x0) {
        counter++;
    }
    else {
        counter = 0;
    }
   
    setOnSSD(counter);
}
