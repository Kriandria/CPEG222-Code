#ifndef _SUPPRESS_PLIB_WARNING          //suppresses the warning about plib
    #define _SUPPRESS_PLIB_WARNING
#endif

#include <xc.h>
#include <plib.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/attribs.h>
#include "btn.h"
#include "lcd.h"
#include "led.h"
#include "utils.h"
#include "config.h"
#include "adc.h"
#include "audio.h"
#include "mic.h"


#pragma config FPLLIDIV = DIV_2         // PLL Input Divider (2x Divider)
#pragma config FPLLMUL = MUL_20         // PLL Multiplier (20x Multiplier)
#pragma config FPLLODIV = DIV_1         // System PLL Output Clock Divider (PLL Divide by 1)
#pragma config FNOSC = PRIPLL           // Oscillator Selection Bits (Primary Osc w/PLL (XT+,HS+,EC+PLL))
#pragma config FSOSCEN = OFF            // Secondary Oscillator Enable (Disabled)
#pragma config POSCMOD = XT             // Primary Oscillator Configuration (XT osc mode)
#pragma config FPBDIV = DIV_8           // Peripheral Clock Divisor (Pb_Clk is Sys_Clk/8)

void delay_ms(int ms);

#define SYS_FREQ    (80000000L)     // 80MHz system clock
#define CORE_TICK_PERIOD (SYS_FREQ / 20) // 4,000,000 ticks/period @ 1 tick per 25ns = 100ms period

// the definitions for the SOUND and SINE frequencies, to be used when Timer3 is configured in specific modes. 
#define TMR_FREQ_SOUND   16000 // 16 kHz
#define TMR_FREQ_SINE   48000 // 48 kHz

int LD_position = 0x0;             // initially all LEDs off
int swtVals = 0b00000000;          // values as an 8bit binary from switches
char strMsg[80];                   // used for LCD display of hex vals
enum mode {PAUSE,UP,DOWN};
int mode = PAUSE;
int limit = 0;
double alarm_count = 0.0;              // used for display on SSD
int int_counter = 0;
unsigned int buttonLock = 0;
unsigned char dig1 = 0;            // digigts 1-3 and decimal are used for the SSD
unsigned char dig2 = 0;
unsigned char dig3 = 0;
unsigned char decimal = 0;




int main(void) {
    DDPCONbits.JTAGEN = 0;      // Statement is required to use Pin RA0 as IO
    BTN_Init();                 // Initializes button registers
    SWT_Init();
    LED_Init();
    LCD_Init();
    SSD_Init();
    
    
    
    LCD_WriteStringAtPos("Team: 25", 0 ,0);
    
    OpenCoreTimer(CORE_TICK_PERIOD);
    mConfigIntCoreTimer(CT_INT_ON | CT_INT_PRIOR_2);
    INTEnableSystemMultiVectoredInt();
    INTEnableInterrupts(); 
    
    UpdateCoreTimer(CORE_TICK_PERIOD);
    
    while (1) {
        
       swtVals = SWT_GetGroupValue(); //keeps the variable equal to the btn state
        
        ///////Updates Hex on LCD/////////////////
        sprintf(strMsg, "Hex:0x%02X", swtVals);
        LCD_WriteStringAtPos(strMsg, 1, 0);
        ///////////////////////////////////////////
        
        LED_SetGroupValue(swtVals); //sends the button values as an 8 bit 
                                    //binary # to the LEDs
        
        if(BTN_GetValue('C') && !buttonLock){
            mode = PAUSE;
            buttonLock = 1;
        }
        else if (BTN_GetValue('U') && !buttonLock){
            mode = UP;
            alarm_count = 0.0;
            limit = swtVals;
            buttonLock = 1;
        }
        else if (BTN_GetValue('D') && !buttonLock){
            mode = DOWN;
            limit = swtVals;
            alarm_count = limit;
            buttonLock = 1;
        }
        if(buttonLock && !BTN_GetValue('C') && !BTN_GetValue('U') && !BTN_GetValue('D')){
            delay_ms(50);
            buttonLock = 0; //unlock buttons if all off
        }
        
        if (mode == PAUSE){                 //assigns digits in PAUSE state by SWT
            dig1 = (swtVals % 100) % 10;
            dig2 = (swtVals % 100) / 10;
            dig3 = (swtVals / 100);
            decimal = 0;
        }
        else if (mode == UP || mode == DOWN){ //assigns digits in UP/DOWN 
            int_counter = (int) alarm_count;
            dig1 = (int_counter % 100) % 10;
            dig2 = (int_counter % 100) / 10;
            dig3 = (int_counter / 100);               
            decimal = (int)(alarm_count * 10) % 10;
        }
        
        //this if statement is to get rid of leading zeros
        //We disable the digit if it is a leading zero
        if (dig3 == 0) {
            tris_SSD_AN3 = 1;
                if (dig2 ==0) {
                    tris_SSD_AN2 = 1;
                    SSD_WriteDigits(decimal, dig1, dig2, dig3, 0, 1, 0, 0);
                }
                else{
                    SSD_WriteDigits(decimal, dig1, dig2, dig3, 0, 1, 0, 0);
                    tris_SSD_AN2 = 0;
                }
            }
        else{
            tris_SSD_AN3 = 0;
            tris_SSD_AN2 = 0;
            SSD_WriteDigits(decimal, dig1, dig2, dig3, 0, 1, 0, 0);
        }
        
        if((mode == DOWN && alarm_count == 0.0) || (mode == UP && alarm_count == limit)){
            playSound();
            mode = PAUSE;
        }
    }
}

void delay_ms(int ms){
    int        i,counter;
    for (counter=0; counter<ms; counter++){
        for(i=0;i<1426;i++){}   //software delay 1 millisec
    }
}

void playSound() {
    AUDIO_Init(1);
    delay_ms(250);
    AUDIO_Close();
    delay_ms(250);
    
    AUDIO_Init(1);
    delay_ms(100);
    AUDIO_Close();
    delay_ms(100);
    AUDIO_Init(1);
    delay_ms(100);
    AUDIO_Close();
    delay_ms(100);
    AUDIO_Init(1);
    delay_ms(100);
    AUDIO_Close();
    delay_ms(100);
    
    AUDIO_Init(1);
    delay_ms(250);
    AUDIO_Close();
    
}



void __ISR(_CORE_TIMER_VECTOR, IPL2SOFT) _CoreTimerHandler(void)
{
    //clear interrupt flag
    mCTClearIntFlag();
    
    UpdateCoreTimer(CORE_TICK_PERIOD); //we'll multiply something by this for changing the speed with POT
    
    
    if (mode == UP) {
        if (alarm_count >= limit) {alarm_count = limit;}
        else {alarm_count += 0.1;}
    }
    else if (mode == DOWN) {
        if (alarm_count <=0.0) {alarm_count = 0.0;}
        else {alarm_count -= 0.1;}
    }
}
